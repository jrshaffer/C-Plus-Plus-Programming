/*
  File: polarcoord.cpp
  Created by: Joseph Shaffer
  Creation Date: October 26, 2016
  Synopsis: ??
*/

#include <iostream>
#include <cmath>

using namespace std;

// FUNCTION PROTOTYPE FOR degrees2radians
double degrees2radians(double angle);

// FUNCTION PROTOTYPE FOR compute_coord
void compute_coord(double polar_radius, double polar_angle, double &x_coord, double &y_coord);

// DO NOT MODIFY THE MAIN ROUTINE IN ANY WAY
int main()
{
  double angle_degrees(0.0), angle_radians(0.0), radius(0.0);
  double coord_x(0.0), coord_y(0.0);

  // Read in polar coordinates
  cout << "Enter radius: ";
  cin >> radius;

  cout << "Enter polar angle (degrees): ";
  cin >> angle_degrees;

  // Convert degrees to radians
  angle_radians = degrees2radians(angle_degrees);

  // Compute Cartesian (x,y) coordinates
  compute_coord(radius, angle_radians, coord_x, coord_y);

  // Output Cartesian coordinates
  cout << "Cartesian coordinates: ";
  cout << "(" << coord_x << "," << coord_y << ")" << endl;

  return 0;
}

// DEFINE FUNCTION degrees2radians here:
double degrees2radians(double angle) {
	return (angle * (M_PI / 180));
}

// DEFINE FUNCTION compute_coord here:
void compute_coord(double polar_radius, double polar_angle, double &x_coord, double &y_coord) {
	x_coord = polar_radius * cos(polar_angle);
	y_coord = polar_radius * sin(polar_angle);
}

